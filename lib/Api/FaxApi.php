<?php
/**
 * FaxApi
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Fax.to REST API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 0.0.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Api;

use \Swagger\Client\ApiClient;
use \Swagger\Client\ApiException;
use \Swagger\Client\Configuration;
use \Swagger\Client\ObjectSerializer;

/**
 * FaxApi Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class FaxApi
{
    /**
     * API Client
     *
     * @var \Swagger\Client\ApiClient instance of the ApiClient
     */
    protected $apiClient;

    /**
     * Constructor
     *
     * @param \Swagger\Client\ApiClient|null $apiClient The api client to use
     */
    public function __construct(\Swagger\Client\ApiClient $apiClient = null)
    {
        if ($apiClient === null) {
            $apiClient = new ApiClient();
        }

        $this->apiClient = $apiClient;
    }

    /**
     * Get API client
     *
     * @return \Swagger\Client\ApiClient get the API client
     */
    public function getApiClient()
    {
        return $this->apiClient;
    }

    /**
     * Set the API client
     *
     * @param \Swagger\Client\ApiClient $apiClient set the API client
     *
     * @return FaxApi
     */
    public function setApiClient(\Swagger\Client\ApiClient $apiClient)
    {
        $this->apiClient = $apiClient;
        return $this;
    }

    /**
     * Operation faxDocumentIdCostsGet
     *
     * 
     *
     * @param string $api_key API Key (required)
     * @param string $fax_number Fax Number (required)
     * @param float $document_id id of the file / document_id (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return void
     */
    public function faxDocumentIdCostsGet($api_key, $fax_number, $document_id)
    {
        list($response) = $this->faxDocumentIdCostsGetWithHttpInfo($api_key, $fax_number, $document_id);
        return $response;
    }

    /**
     * Operation faxDocumentIdCostsGetWithHttpInfo
     *
     * 
     *
     * @param string $api_key API Key (required)
     * @param string $fax_number Fax Number (required)
     * @param float $document_id id of the file / document_id (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function faxDocumentIdCostsGetWithHttpInfo($api_key, $fax_number, $document_id)
    {
        // verify the required parameter 'api_key' is set
        if ($api_key === null) {
            throw new \InvalidArgumentException('Missing the required parameter $api_key when calling faxDocumentIdCostsGet');
        }
        // verify the required parameter 'fax_number' is set
        if ($fax_number === null) {
            throw new \InvalidArgumentException('Missing the required parameter $fax_number when calling faxDocumentIdCostsGet');
        }
        // verify the required parameter 'document_id' is set
        if ($document_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $document_id when calling faxDocumentIdCostsGet');
        }
        // parse inputs
        $resourcePath = "/fax/{document_id}/costs";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept([]);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // query params
        if ($api_key !== null) {
            $queryParams['api_key'] = $this->apiClient->getSerializer()->toQueryValue($api_key);
        }
        // query params
        if ($fax_number !== null) {
            $queryParams['fax_number'] = $this->apiClient->getSerializer()->toQueryValue($fax_number);
        }
        // path params
        if ($document_id !== null) {
            $resourcePath = str_replace(
                "{" . "document_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($document_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/fax/{document_id}/costs'
            );

            return [$response, $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

    /**
     * Operation faxHistoryGet
     *
     * 
     *
     * @param string $api_key API Key (required)
     * @param string $limit Number of records to return (optional)
     * @param string $page Page to display (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return void
     */
    public function faxHistoryGet($api_key, $limit = null, $page = null)
    {
        list($response) = $this->faxHistoryGetWithHttpInfo($api_key, $limit, $page);
        return $response;
    }

    /**
     * Operation faxHistoryGetWithHttpInfo
     *
     * 
     *
     * @param string $api_key API Key (required)
     * @param string $limit Number of records to return (optional)
     * @param string $page Page to display (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function faxHistoryGetWithHttpInfo($api_key, $limit = null, $page = null)
    {
        // verify the required parameter 'api_key' is set
        if ($api_key === null) {
            throw new \InvalidArgumentException('Missing the required parameter $api_key when calling faxHistoryGet');
        }
        // parse inputs
        $resourcePath = "/fax-history";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept([]);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // query params
        if ($api_key !== null) {
            $queryParams['api_key'] = $this->apiClient->getSerializer()->toQueryValue($api_key);
        }
        // query params
        if ($limit !== null) {
            $queryParams['limit'] = $this->apiClient->getSerializer()->toQueryValue($limit);
        }
        // query params
        if ($page !== null) {
            $queryParams['page'] = $this->apiClient->getSerializer()->toQueryValue($page);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/fax-history'
            );

            return [$response, $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

    /**
     * Operation faxJobIdStatusGet
     *
     * 
     *
     * @param string $api_key API Key (required)
     * @param float $job_id id of the fax job (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return void
     */
    public function faxJobIdStatusGet($api_key, $job_id)
    {
        list($response) = $this->faxJobIdStatusGetWithHttpInfo($api_key, $job_id);
        return $response;
    }

    /**
     * Operation faxJobIdStatusGetWithHttpInfo
     *
     * 
     *
     * @param string $api_key API Key (required)
     * @param float $job_id id of the fax job (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function faxJobIdStatusGetWithHttpInfo($api_key, $job_id)
    {
        // verify the required parameter 'api_key' is set
        if ($api_key === null) {
            throw new \InvalidArgumentException('Missing the required parameter $api_key when calling faxJobIdStatusGet');
        }
        // verify the required parameter 'job_id' is set
        if ($job_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $job_id when calling faxJobIdStatusGet');
        }
        // parse inputs
        $resourcePath = "/fax/{job_id}/status";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept([]);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // query params
        if ($api_key !== null) {
            $queryParams['api_key'] = $this->apiClient->getSerializer()->toQueryValue($api_key);
        }
        // path params
        if ($job_id !== null) {
            $resourcePath = str_replace(
                "{" . "job_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($job_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/fax/{job_id}/status'
            );

            return [$response, $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

    /**
     * Operation faxPost
     *
     * 
     *
     * @param string $api_key API Key (required)
     * @param string $fax_number Fax Number (required)
     * @param int $document_id Document id. If you want to use existing document you need to specify the document_id (optional)
     * @param \SplFileObject $file PDF file to upload (optional)
     * @param int $delete_file Whether to delete file after fax transaction. (put 1 to delete) (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return void
     */
    public function faxPost($api_key, $fax_number, $document_id = null, $file = null, $delete_file = null)
    {
        list($response) = $this->faxPostWithHttpInfo($api_key, $fax_number, $document_id, $file, $delete_file);
        return $response;
    }

    /**
     * Operation faxPostWithHttpInfo
     *
     * 
     *
     * @param string $api_key API Key (required)
     * @param string $fax_number Fax Number (required)
     * @param int $document_id Document id. If you want to use existing document you need to specify the document_id (optional)
     * @param \SplFileObject $file PDF file to upload (optional)
     * @param int $delete_file Whether to delete file after fax transaction. (put 1 to delete) (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function faxPostWithHttpInfo($api_key, $fax_number, $document_id = null, $file = null, $delete_file = null)
    {
        // verify the required parameter 'api_key' is set
        if ($api_key === null) {
            throw new \InvalidArgumentException('Missing the required parameter $api_key when calling faxPost');
        }
        // verify the required parameter 'fax_number' is set
        if ($fax_number === null) {
            throw new \InvalidArgumentException('Missing the required parameter $fax_number when calling faxPost');
        }
        // parse inputs
        $resourcePath = "/fax";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept([]);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['multipart/form-data']);

        // query params
        if ($api_key !== null) {
            $queryParams['api_key'] = $this->apiClient->getSerializer()->toQueryValue($api_key);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // form params
        if ($fax_number !== null) {
            $formParams['fax_number'] = $this->apiClient->getSerializer()->toFormValue($fax_number);
        }
        // form params
        if ($document_id !== null) {
            $formParams['document_id'] = $this->apiClient->getSerializer()->toFormValue($document_id);
        }
        // form params
        if ($file !== null) {
            // PHP 5.5 introduced a CurlFile object that deprecates the old @filename syntax
            // See: https://wiki.php.net/rfc/curl-file-upload
            if (function_exists('curl_file_create')) {
                $formParams['file'] = curl_file_create($this->apiClient->getSerializer()->toFormValue($file));
            } else {
                $formParams['file'] = '@' . $this->apiClient->getSerializer()->toFormValue($file);
            }
        }
        // form params
        if ($delete_file !== null) {
            $formParams['delete_file'] = $this->apiClient->getSerializer()->toFormValue($delete_file);
        }
        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/fax'
            );

            return [$response, $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }
}

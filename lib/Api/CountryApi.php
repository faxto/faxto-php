<?php
/**
 * CountryApi
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Fax.to REST API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 0.0.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Api;

use \Swagger\Client\ApiClient;
use \Swagger\Client\ApiException;
use \Swagger\Client\Configuration;
use \Swagger\Client\ObjectSerializer;

/**
 * CountryApi Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class CountryApi
{
    /**
     * API Client
     *
     * @var \Swagger\Client\ApiClient instance of the ApiClient
     */
    protected $apiClient;

    /**
     * Constructor
     *
     * @param \Swagger\Client\ApiClient|null $apiClient The api client to use
     */
    public function __construct(\Swagger\Client\ApiClient $apiClient = null)
    {
        if ($apiClient === null) {
            $apiClient = new ApiClient();
        }

        $this->apiClient = $apiClient;
    }

    /**
     * Get API client
     *
     * @return \Swagger\Client\ApiClient get the API client
     */
    public function getApiClient()
    {
        return $this->apiClient;
    }

    /**
     * Set the API client
     *
     * @param \Swagger\Client\ApiClient $apiClient set the API client
     *
     * @return CountryApi
     */
    public function setApiClient(\Swagger\Client\ApiClient $apiClient)
    {
        $this->apiClient = $apiClient;
        return $this;
    }

    /**
     * Operation areacodesCountryCodeStateIdGet
     *
     * @param string $country_code countryCode in the Country (required)
     * @param string $state_id stateId in the Country (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return void
     */
    public function areacodesCountryCodeStateIdGet($country_code, $state_id)
    {
        list($response) = $this->areacodesCountryCodeStateIdGetWithHttpInfo($country_code, $state_id);
        return $response;
    }

    /**
     * Operation areacodesCountryCodeStateIdGetWithHttpInfo
     *
     * @param string $country_code countryCode in the Country (required)
     * @param string $state_id stateId in the Country (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function areacodesCountryCodeStateIdGetWithHttpInfo($country_code, $state_id)
    {
        // verify the required parameter 'country_code' is set
        if ($country_code === null) {
            throw new \InvalidArgumentException('Missing the required parameter $country_code when calling areacodesCountryCodeStateIdGet');
        }
        // verify the required parameter 'state_id' is set
        if ($state_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $state_id when calling areacodesCountryCodeStateIdGet');
        }
        // parse inputs
        $resourcePath = "/areacodes/{countryCode}/{stateId}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept([]);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // path params
        if ($country_code !== null) {
            $resourcePath = str_replace(
                "{" . "countryCode" . "}",
                $this->apiClient->getSerializer()->toPathValue($country_code),
                $resourcePath
            );
        }
        // path params
        if ($state_id !== null) {
            $resourcePath = str_replace(
                "{" . "stateId" . "}",
                $this->apiClient->getSerializer()->toPathValue($state_id),
                $resourcePath
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/areacodes/{countryCode}/{stateId}'
            );

            return [null, $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

    /**
     * Operation countriesCountryCodeDidgroupsGet
     *
     * @param string $country_code countryCode in the Country (required)
     * @param string $did_group_ids didGroupId in the Country (required)
     * @param string $state_id stateId in the Country (required)
     * @param string $city_name_pattern cityNamePattern in the Country (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return void
     */
    public function countriesCountryCodeDidgroupsGet($country_code, $did_group_ids, $state_id, $city_name_pattern)
    {
        list($response) = $this->countriesCountryCodeDidgroupsGetWithHttpInfo($country_code, $did_group_ids, $state_id, $city_name_pattern);
        return $response;
    }

    /**
     * Operation countriesCountryCodeDidgroupsGetWithHttpInfo
     *
     * @param string $country_code countryCode in the Country (required)
     * @param string $did_group_ids didGroupId in the Country (required)
     * @param string $state_id stateId in the Country (required)
     * @param string $city_name_pattern cityNamePattern in the Country (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function countriesCountryCodeDidgroupsGetWithHttpInfo($country_code, $did_group_ids, $state_id, $city_name_pattern)
    {
        // verify the required parameter 'country_code' is set
        if ($country_code === null) {
            throw new \InvalidArgumentException('Missing the required parameter $country_code when calling countriesCountryCodeDidgroupsGet');
        }
        // verify the required parameter 'did_group_ids' is set
        if ($did_group_ids === null) {
            throw new \InvalidArgumentException('Missing the required parameter $did_group_ids when calling countriesCountryCodeDidgroupsGet');
        }
        // verify the required parameter 'state_id' is set
        if ($state_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $state_id when calling countriesCountryCodeDidgroupsGet');
        }
        // verify the required parameter 'city_name_pattern' is set
        if ($city_name_pattern === null) {
            throw new \InvalidArgumentException('Missing the required parameter $city_name_pattern when calling countriesCountryCodeDidgroupsGet');
        }
        // parse inputs
        $resourcePath = "/countries/{countryCode}/didgroups";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept([]);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // query params
        if ($did_group_ids !== null) {
            $queryParams['didGroupIds'] = $this->apiClient->getSerializer()->toQueryValue($did_group_ids);
        }
        // query params
        if ($state_id !== null) {
            $queryParams['stateId'] = $this->apiClient->getSerializer()->toQueryValue($state_id);
        }
        // query params
        if ($city_name_pattern !== null) {
            $queryParams['cityNamePattern'] = $this->apiClient->getSerializer()->toQueryValue($city_name_pattern);
        }
        // path params
        if ($country_code !== null) {
            $resourcePath = str_replace(
                "{" . "countryCode" . "}",
                $this->apiClient->getSerializer()->toPathValue($country_code),
                $resourcePath
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/countries/{countryCode}/didgroups'
            );

            return [null, $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

    /**
     * Operation countriesDidgroupsDidGroupIdProvisionPost
     *
     * @param string $did_group_id didGroupId in the Country (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return void
     */
    public function countriesDidgroupsDidGroupIdProvisionPost($did_group_id)
    {
        list($response) = $this->countriesDidgroupsDidGroupIdProvisionPostWithHttpInfo($did_group_id);
        return $response;
    }

    /**
     * Operation countriesDidgroupsDidGroupIdProvisionPostWithHttpInfo
     *
     * @param string $did_group_id didGroupId in the Country (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function countriesDidgroupsDidGroupIdProvisionPostWithHttpInfo($did_group_id)
    {
        // verify the required parameter 'did_group_id' is set
        if ($did_group_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $did_group_id when calling countriesDidgroupsDidGroupIdProvisionPost');
        }
        // parse inputs
        $resourcePath = "/countries/didgroups/{didGroupId}/provision";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept([]);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // path params
        if ($did_group_id !== null) {
            $resourcePath = str_replace(
                "{" . "didGroupId" . "}",
                $this->apiClient->getSerializer()->toPathValue($did_group_id),
                $resourcePath
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/countries/didgroups/{didGroupId}/provision'
            );

            return [null, $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

    /**
     * Operation countriesGet
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return void
     */
    public function countriesGet()
    {
        list($response) = $this->countriesGetWithHttpInfo();
        return $response;
    }

    /**
     * Operation countriesGetWithHttpInfo
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function countriesGetWithHttpInfo()
    {
        // parse inputs
        $resourcePath = "/countries";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept([]);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);


        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/countries'
            );

            return [null, $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

    /**
     * Operation statesCountryCodeGet
     *
     * @param string $country_code countryCode in the Country (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return void
     */
    public function statesCountryCodeGet($country_code)
    {
        list($response) = $this->statesCountryCodeGetWithHttpInfo($country_code);
        return $response;
    }

    /**
     * Operation statesCountryCodeGetWithHttpInfo
     *
     * @param string $country_code countryCode in the Country (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function statesCountryCodeGetWithHttpInfo($country_code)
    {
        // verify the required parameter 'country_code' is set
        if ($country_code === null) {
            throw new \InvalidArgumentException('Missing the required parameter $country_code when calling statesCountryCodeGet');
        }
        // parse inputs
        $resourcePath = "/states/{countryCode}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept([]);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // path params
        if ($country_code !== null) {
            $resourcePath = str_replace(
                "{" . "countryCode" . "}",
                $this->apiClient->getSerializer()->toPathValue($country_code),
                $resourcePath
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/states/{countryCode}'
            );

            return [null, $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }
}
